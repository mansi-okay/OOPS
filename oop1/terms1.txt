Class is template using which instances called object are created.
Thus, class is an idea, while an object is a working version of that idea that is created and stored in memory at runtime.

The properties/attributes defined inside a class but outside any method, are called instance variables.
A variable that holds the memory address of an object are reference variables. 
Multiple reference variables can point to the same object, but each reference variable can point to only one object at a time.

Keyword "new" allocates memory at runtime in the heap to create an object and returns its memory address.
So, the reference variable (stored in the stack) holds the address of the object, not the object itself.

A constructor is a special function in a class which has the same name as class, that runs automatically when an object is created. It sets up the object with initial values.

Keyword "this" is used inside a class to refer to the current object. It accesses that object's variables and methods.

Constructor overloading is defining multiple constructors in the same class with different parameter lists. The right one is picked and is based on the arguments passed during object creation.

Constructor chaining is calling one constructor from another

Keyword "new" is not used for primitive data types because primitives are directly stored in stack memory (to increase efficiency) and "new" is for heap memory and objects in java

Wrapper classes exist to create object version of a primitive data.
Wrapper classes like Integer are immutable. You can reassign the variable, but you can't modify the value inside because they are final.
So, Wrapper classes are immutable because reassigning Integer a does not affect b, and there is no method like a.setValue() to change the object in heap memory.

Keyword "final" is used to make something unchangeable. It can be applied to variables, methods, and classes to stop them from being modified.